#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Author:  Dominik Gresch <greschd@gmx.ch>
# Date:    15.10.2014 10:22:43 CEST
# File:    tb_example.py

from common import *

import os
import types
import shutil

class TbExampleTestCase(BuildDirTestCase):

    def createH(self, t1, t2):

        builder = z2pack.em.tb.Builder()

        # create the two atoms
        builder.add_atom([1, 1], [0, 0, 0], 1)
        builder.add_atom([-1, -1], [0.5, 0.5, 0], 1)

        # add hopping between different atoms
        builder.add_hopping(((0, 0), (1, 1)),
                           z2pack.em.tb.vectors.combine([0, -1], [0, -1], 0),
                           t1,
                           phase=[1, -1j, 1j, -1])
        builder.add_hopping(((0, 1), (1, 0)),
                           z2pack.em.tb.vectors.combine([0, -1], [0, -1], 0),
                           t1,
                           phase=[1, 1j, -1j, -1])

        # add hopping between neighbouring orbitals of the same type
        builder.add_hopping((((0, 0), (0, 0)), ((0, 1), (0, 1))),
                           z2pack.em.tb.vectors.neighbours([0, 1],
                                                        forward_only=True),
                           t2,
                           phase=[1])
        builder.add_hopping((((1, 1), (1, 1)), ((1, 0), (1, 0))),
                           z2pack.em.tb.vectors.neighbours([0, 1],
                                                        forward_only=True),
                           -t2,
                           phase=[1])
        self.model = builder.create()

    # this test may produce false negatives due to small numerical differences
    def test_res1(self):
        self.createH(0.2, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0], pickle_file=None)
        tb_surface.wcc_calc(verbose=False, num_strings=20)
        
        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.49969760416602754, 0.50030239583397251], [0.49880043805854513, 0.50119956194145499], [0.49773828651532404, 0.50226171348467608], [0.49473050423908532, 0.50526949576091473], [0.49401284618977204, 0.50598715381022807], [0.49075937388646557, 0.50924062611353471], [0.48837008585483471, 0.51162991414516534], [0.48451904842730736, 0.51548095157269258], [0.48246334933733581, 0.51753665066266441], [0.47592447770545926, 0.52407552229454091], [0.46594235813352747, 0.53405764186647264], [0.45778547722440216, 0.5422145227755979], [0.44322520961368744, 0.55677479038631272], [0.41935330374466423, 0.58064669625533583], [0.38092062985140202, 0.61907937014859815], [0.32737557006945883, 0.67262442993054128], [0.25100649646408979, 0.7489935035359101], [0.16336944227638633, 0.83663055772361372], [0.080972973009710125, 0.91902702699029004], [0.0011194259395927201, 0.9988805740604072]], 'lambda_': [array([[ -9.99998195e-01-0.00187074j,   1.91188843e-04+0.00027166j],
       [ -1.91188843e-04+0.00027166j,  -9.99998195e-01+0.00187074j]]), array([[ -9.99971596e-01+0.00752557j,   4.01269156e-04+0.0001057j ],
       [ -4.01269156e-04+0.0001057j ,  -9.99971596e-01-0.00752557j]]), array([[ -9.99899029e-01+0.01399121j,   1.46545984e-04+0.0024813j ],
       [ -1.46545984e-04+0.0024813j ,  -9.99899029e-01-0.01399121j]]), array([[ -9.99451940e-01+0.03306642j,  -8.84781128e-04+0.00128407j],
       [  8.84781128e-04+0.00128407j,  -9.99451940e-01-0.03306642j]]), array([[ -9.99292512e-01+0.03756884j,   3.16253478e-05-0.00174864j],
       [ -3.16253478e-05-0.00174864j,  -9.99292512e-01-0.03756884j]]), array([[-0.99831496+0.05786025j, -0.00433038+0.00082637j],
       [ 0.00433038+0.00082637j, -0.99831496-0.05786025j]]), array([[-0.99733136+0.07297063j, -0.00217078+0.00085297j],
       [ 0.00217078+0.00085297j, -0.99733136-0.07297063j]]), array([[-0.99527303+0.09680589j,  0.00296530-0.00717062j],
       [-0.00296530-0.00717062j, -0.99527303-0.09680589j]]), array([[-0.99393566+0.10978177j, -0.00628665-0.0005884j ],
       [ 0.00628665-0.0005884j , -0.99393566-0.10978177j]]), array([[-0.98858035+0.15044832j, -0.00815571-0.00277152j],
       [ 0.00815571-0.00277152j, -0.98858035-0.15044832j]]), array([[-0.97719128+0.20925065j, -0.03620934-0.000508j  ],
       [ 0.03620934-0.000508j  , -0.97719128-0.20925065j]]), array([[-0.96502918+0.26177163j, -0.01388072+0.00127431j],
       [ 0.01388072+0.00127431j, -0.96502918-0.26177163j]]), array([[ -9.37044967e-01 +3.49208690e-01j,
         -7.83797258e-05 +1.21624044e-04j],
       [  7.83797258e-05 +1.21624044e-04j,
         -9.37044967e-01 -3.49208690e-01j]]), array([[-0.87434194+0.48334976j, -0.04338009+0.0041659j ],
       [ 0.04338009+0.0041659j , -0.87434194-0.48334976j]]), array([[-0.73291616+0.64101745j,  0.22785540+0.00352802j],
       [-0.22785540+0.00352802j, -0.73291616-0.64101745j]]), array([[-0.46723873+0.88366353j,  0.02764009+0.00792225j],
       [-0.02764009+0.00792225j, -0.46723873-0.88366353j]]), array([[-0.00632396+0.99235247j,  0.02267943+0.12117023j],
       [-0.02267943+0.12117023j, -0.00632396-0.99235247j]]), array([[ 0.51783293+0.855361j  , -0.01269038-0.00675008j],
       [ 0.01269038-0.00675008j,  0.51783293-0.855361j  ]]), array([[  8.73345185e-01+0.48708565j,   7.11359330e-05+0.0039687j ],
       [ -7.11359330e-05+0.0039687j ,   8.73345185e-01-0.48708565j]]), array([[ 0.99997526-0.00667251j,  0.00185152+0.00123274j],
       [-0.00185152+0.00123274j,  0.99997526+0.00667251j]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_res2(self):
        """ test pos_check=False """
        self.createH(0, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0], pickle_file=None)
        tb_surface.wcc_calc(verbose=False,
                            num_strings=20,
                            pos_tol=None)

        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.625, 0.625], [0.625, 0.625], [0.625, 0.625], [0.625, 0.625], [0.75, 0.75], [0.75, 0.75]], 'lambda_': [array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-0.70710678+0.70710678j,  0.00000000+0.j        ],
       [ 0.00000000+0.j        , -0.70710678+0.70710678j]]), array([[-0.70710678+0.70710678j,  0.00000000+0.j        ],
       [ 0.00000000+0.j        , -0.70710678+0.70710678j]]), array([[-0.70710678+0.70710678j,  0.00000000+0.j        ],
       [ 0.00000000+0.j        , -0.70710678+0.70710678j]]), array([[-0.70710678+0.70710678j,  0.00000000+0.j        ],
       [ 0.00000000+0.j        , -0.70710678+0.70710678j]]), array([[ -1.11022302e-16+1.j,   0.00000000e+00+0.j],
       [  0.00000000e+00+0.j,  -1.11022302e-16+1.j]]), array([[ -1.11022302e-16+1.j,   0.00000000e+00+0.j],
       [  0.00000000e+00+0.j,  -1.11022302e-16+1.j]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.125, 0.125, 0.125, 0.125, 0.25, 0.25]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_res3(self):
        """ test gap_tol=None """
        self.createH(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0], pickle_file=None)
        tb_surface.wcc_calc(verbose=False,
                            num_strings=20,
                            gap_tol=None)

        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.49991853042386736, 0.50008146957613286], [0.4996803317900792, 0.50031966820992113], [0.49945915739782298, 0.50054084260217702], [0.49912731810352018, 0.50087268189648015], [0.49840861746748849, 0.50159138253251156], [0.49777900797017388, 0.50222099202982595], [0.49710234614617105, 0.50289765385382901], [0.49575581788013978, 0.50424418211986033], [0.49491179640161509, 0.50508820359838491], [0.49191770531427514, 0.50808229468572508], [0.49027576380229754, 0.50972423619770257], [0.48511552535529501, 0.51488447464470499], [0.47790097538481369, 0.52209902461518642], [0.46089190740235514, 0.53910809259764481], [0.42097693470264252, 0.57902306529735736], [0.32658685148699429, 0.67341314851300582], [0.22748507469695797, 0.77251492530304211], [0.14453538338495614, 0.8554646166150438], [0.067399261881237502, 0.93260073811876243], [0.0027474728039072675, 0.9972525271960927]], 'lambda_': [array([[ -9.99999869e-01 -5.08848218e-04j,
          3.25733077e-05 +4.51910023e-05j],
       [ -3.25733077e-05 +4.51910023e-05j,
         -9.99999869e-01 +5.08848218e-04j]]), array([[ -9.99997983e-01 +2.00739106e-03j,
          6.76772351e-05 -2.59629986e-06j],
       [ -6.76772351e-05 -2.59629986e-06j,
         -9.99997983e-01 -2.00739106e-03j]]), array([[ -9.99994226e-01+0.00337304j,   1.44366404e-05-0.00041256j],
       [ -1.44366404e-05-0.00041256j,  -9.99994226e-01-0.00337304j]]), array([[ -9.99984967e-01+0.00545904j,   1.94883941e-04-0.00047575j],
       [ -1.94883941e-04-0.00047575j,  -9.99984967e-01-0.00545904j]]), array([[ -9.99950011e-01 +9.99846771e-03j,
          7.92289064e-05 +7.89807754e-06j],
       [ -7.92289064e-05 +7.89807754e-06j,
         -9.99950011e-01 -9.99846771e-03j]]), array([[ -9.99902632e-01 +1.39516966e-02j,
         -2.77082750e-04 +1.02280728e-05j],
       [  2.77082750e-04 +1.02280728e-05j,
         -9.99902632e-01 -1.39516966e-02j]]), array([[ -9.99834266e-01+0.01819813j,  -4.17081771e-04+0.00030652j],
       [  4.17081771e-04+0.00030652j,  -9.99834266e-01-0.01819813j]]), array([[ -9.99644457e-01+0.02663694j,  -5.64950834e-04-0.00105525j],
       [  5.64950834e-04-0.00105525j,  -9.99644457e-01-0.02663694j]]), array([[ -9.99488999e-01 +3.19541041e-02j,
         -8.22191336e-04 +4.77577587e-06j],
       [  8.22191336e-04 +4.77577587e-06j,
         -9.99488999e-01 -3.19541041e-02j]]), array([[-0.99871084+0.05065094j, -0.00237885-0.00233982j],
       [ 0.00237885-0.00233982j, -0.99871084-0.05065094j]]), array([[-0.99813403+0.06099769j, -0.00224228-0.00164948j],
       [ 0.00224228-0.00164948j, -0.99813403-0.06099769j]]), array([[-0.99563001+0.09337116j, -0.00161219+0.00032639j],
       [ 0.00161219+0.00032639j, -0.99563001-0.09337116j]]), array([[ -9.90375502e-01+0.1384062j,   2.27776763e-04+0.00019j  ],
       [ -2.27776763e-04+0.00019j  ,  -9.90375502e-01-0.1384062j]]), array([[-0.96996161+0.24299983j, -0.01117899-0.00076977j],
       [ 0.01117899-0.00076977j, -0.96996161-0.24299983j]]), array([[-0.87924728+0.47000628j,  0.06916755-0.03513063j],
       [-0.06916755-0.03513063j, -0.87924728-0.47000628j]]), array([[-0.46285155+0.88643062j,  0.00202045-0.00226254j],
       [-0.00202045-0.00226254j, -0.46285155-0.88643062j]]), array([[ 0.14099407+0.98650187j, -0.03866915-0.07375244j],
       [ 0.03866915-0.07375244j,  0.14099407-0.98650187j]]), array([[ 0.61521112 +7.88361909e-01j, -0.00072536 +5.05898948e-04j],
       [ 0.00072536 +5.05898948e-04j,  0.61521112 -7.88361909e-01j]]), array([[ 0.91166356+0.41064404j, -0.00839516+0.01305905j],
       [ 0.00839516+0.01305905j,  0.91166356-0.41064404j]]), array([[ 0.99985100-0.01622965j,  0.00474889+0.00346757j],
       [-0.00474889+0.00346757j,  0.99985100+0.01622965j]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 2.2204460492503131e-16, 0.0, 2.2204460492503131e-16, 0.0, 0.99999999999999989, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.49999999999999994, 0.5, 0.49999999999999994]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_res4(self):
        """ test move_tol=None """
        self.createH(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0], pickle_file=None)
        tb_surface.wcc_calc(verbose=False,
                          num_strings=20,
                          move_tol=None)

        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.49991853042386736, 0.50008146957613286], [0.4996803317900792, 0.50031966820992113], [0.49945915739782298, 0.50054084260217702], [0.49912731810352018, 0.50087268189648015], [0.49840861746748849, 0.50159138253251156], [0.49777900797017388, 0.50222099202982595], [0.49710234614617105, 0.50289765385382901], [0.49575581788013978, 0.50424418211986033], [0.49491179640161509, 0.50508820359838491], [0.49191770531427514, 0.50808229468572508], [0.49027576380229754, 0.50972423619770257], [0.48511552535529501, 0.51488447464470499], [0.47790097538481369, 0.52209902461518642], [0.46089190740235514, 0.53910809259764481], [0.42097693470264252, 0.57902306529735736], [0.32658685148699429, 0.67341314851300582], [0.22748507469695797, 0.77251492530304211], [0.14453538338495614, 0.8554646166150438], [0.067399261881237502, 0.93260073811876243], [0.0027474728039072675, 0.9972525271960927]], 'lambda_': [array([[ -9.99999869e-01 -5.08848218e-04j,
          3.25733077e-05 +4.51910023e-05j],
       [ -3.25733077e-05 +4.51910023e-05j,
         -9.99999869e-01 +5.08848218e-04j]]), array([[ -9.99997983e-01 +2.00739106e-03j,
          6.76772351e-05 -2.59629986e-06j],
       [ -6.76772351e-05 -2.59629986e-06j,
         -9.99997983e-01 -2.00739106e-03j]]), array([[ -9.99994226e-01+0.00337304j,   1.44366404e-05-0.00041256j],
       [ -1.44366404e-05-0.00041256j,  -9.99994226e-01-0.00337304j]]), array([[ -9.99984967e-01+0.00545904j,   1.94883941e-04-0.00047575j],
       [ -1.94883941e-04-0.00047575j,  -9.99984967e-01-0.00545904j]]), array([[ -9.99950011e-01 +9.99846771e-03j,
          7.92289064e-05 +7.89807754e-06j],
       [ -7.92289064e-05 +7.89807754e-06j,
         -9.99950011e-01 -9.99846771e-03j]]), array([[ -9.99902632e-01 +1.39516966e-02j,
         -2.77082750e-04 +1.02280728e-05j],
       [  2.77082750e-04 +1.02280728e-05j,
         -9.99902632e-01 -1.39516966e-02j]]), array([[ -9.99834266e-01+0.01819813j,  -4.17081771e-04+0.00030652j],
       [  4.17081771e-04+0.00030652j,  -9.99834266e-01-0.01819813j]]), array([[ -9.99644457e-01+0.02663694j,  -5.64950834e-04-0.00105525j],
       [  5.64950834e-04-0.00105525j,  -9.99644457e-01-0.02663694j]]), array([[ -9.99488999e-01 +3.19541041e-02j,
         -8.22191336e-04 +4.77577587e-06j],
       [  8.22191336e-04 +4.77577587e-06j,
         -9.99488999e-01 -3.19541041e-02j]]), array([[-0.99871084+0.05065094j, -0.00237885-0.00233982j],
       [ 0.00237885-0.00233982j, -0.99871084-0.05065094j]]), array([[-0.99813403+0.06099769j, -0.00224228-0.00164948j],
       [ 0.00224228-0.00164948j, -0.99813403-0.06099769j]]), array([[-0.99563001+0.09337116j, -0.00161219+0.00032639j],
       [ 0.00161219+0.00032639j, -0.99563001-0.09337116j]]), array([[ -9.90375502e-01+0.1384062j,   2.27776763e-04+0.00019j  ],
       [ -2.27776763e-04+0.00019j  ,  -9.90375502e-01-0.1384062j]]), array([[-0.96996161+0.24299983j, -0.01117899-0.00076977j],
       [ 0.01117899-0.00076977j, -0.96996161-0.24299983j]]), array([[-0.87924728+0.47000628j,  0.06916755-0.03513063j],
       [-0.06916755-0.03513063j, -0.87924728-0.47000628j]]), array([[-0.46285155+0.88643062j,  0.00202045-0.00226254j],
       [-0.00202045-0.00226254j, -0.46285155-0.88643062j]]), array([[ 0.14099407+0.98650187j, -0.03866915-0.07375244j],
       [ 0.03866915-0.07375244j,  0.14099407-0.98650187j]]), array([[ 0.61521112 +7.88361909e-01j, -0.00072536 +5.05898948e-04j],
       [ 0.00072536 +5.05898948e-04j,  0.61521112 -7.88361909e-01j]]), array([[ 0.91166356+0.41064404j, -0.00839516+0.01305905j],
       [ 0.00839516+0.01305905j,  0.91166356-0.41064404j]]), array([[ 0.99985100-0.01622965j,  0.00474889+0.00346757j],
       [-0.00474889+0.00346757j,  0.99985100+0.01622965j]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 2.2204460492503131e-16, 0.0, 2.2204460492503131e-16, 0.0, 0.99999999999999989, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.49999999999999994, 0.5, 0.49999999999999994]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_res5(self):
        """ test gap_tol=None and move_tol=None"""
        self.createH(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0], pickle_file=None)
        tb_surface.wcc_calc(verbose=False,
                            num_strings=20,
                            gap_tol=None,
                            move_tol=None)

        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.49991853042386736, 0.50008146957613286], [0.4996803317900792, 0.50031966820992113], [0.49945915739782298, 0.50054084260217702], [0.49912731810352018, 0.50087268189648015], [0.49840861746748849, 0.50159138253251156], [0.49777900797017388, 0.50222099202982595], [0.49710234614617105, 0.50289765385382901], [0.49575581788013978, 0.50424418211986033], [0.49491179640161509, 0.50508820359838491], [0.49191770531427514, 0.50808229468572508], [0.49027576380229754, 0.50972423619770257], [0.48511552535529501, 0.51488447464470499], [0.47790097538481369, 0.52209902461518642], [0.46089190740235514, 0.53910809259764481], [0.42097693470264252, 0.57902306529735736], [0.32658685148699429, 0.67341314851300582], [0.22748507469695797, 0.77251492530304211], [0.14453538338495614, 0.8554646166150438], [0.067399261881237502, 0.93260073811876243], [0.0027474728039072675, 0.9972525271960927]], 'lambda_': [array([[ -9.99999869e-01 -5.08848218e-04j,
          3.25733077e-05 +4.51910023e-05j],
       [ -3.25733077e-05 +4.51910023e-05j,
         -9.99999869e-01 +5.08848218e-04j]]), array([[ -9.99997983e-01 +2.00739106e-03j,
          6.76772351e-05 -2.59629986e-06j],
       [ -6.76772351e-05 -2.59629986e-06j,
         -9.99997983e-01 -2.00739106e-03j]]), array([[ -9.99994226e-01+0.00337304j,   1.44366404e-05-0.00041256j],
       [ -1.44366404e-05-0.00041256j,  -9.99994226e-01-0.00337304j]]), array([[ -9.99984967e-01+0.00545904j,   1.94883941e-04-0.00047575j],
       [ -1.94883941e-04-0.00047575j,  -9.99984967e-01-0.00545904j]]), array([[ -9.99950011e-01 +9.99846771e-03j,
          7.92289064e-05 +7.89807754e-06j],
       [ -7.92289064e-05 +7.89807754e-06j,
         -9.99950011e-01 -9.99846771e-03j]]), array([[ -9.99902632e-01 +1.39516966e-02j,
         -2.77082750e-04 +1.02280728e-05j],
       [  2.77082750e-04 +1.02280728e-05j,
         -9.99902632e-01 -1.39516966e-02j]]), array([[ -9.99834266e-01+0.01819813j,  -4.17081771e-04+0.00030652j],
       [  4.17081771e-04+0.00030652j,  -9.99834266e-01-0.01819813j]]), array([[ -9.99644457e-01+0.02663694j,  -5.64950834e-04-0.00105525j],
       [  5.64950834e-04-0.00105525j,  -9.99644457e-01-0.02663694j]]), array([[ -9.99488999e-01 +3.19541041e-02j,
         -8.22191336e-04 +4.77577587e-06j],
       [  8.22191336e-04 +4.77577587e-06j,
         -9.99488999e-01 -3.19541041e-02j]]), array([[-0.99871084+0.05065094j, -0.00237885-0.00233982j],
       [ 0.00237885-0.00233982j, -0.99871084-0.05065094j]]), array([[-0.99813403+0.06099769j, -0.00224228-0.00164948j],
       [ 0.00224228-0.00164948j, -0.99813403-0.06099769j]]), array([[-0.99563001+0.09337116j, -0.00161219+0.00032639j],
       [ 0.00161219+0.00032639j, -0.99563001-0.09337116j]]), array([[ -9.90375502e-01+0.1384062j,   2.27776763e-04+0.00019j  ],
       [ -2.27776763e-04+0.00019j  ,  -9.90375502e-01-0.1384062j]]), array([[-0.96996161+0.24299983j, -0.01117899-0.00076977j],
       [ 0.01117899-0.00076977j, -0.96996161-0.24299983j]]), array([[-0.87924728+0.47000628j,  0.06916755-0.03513063j],
       [-0.06916755-0.03513063j, -0.87924728-0.47000628j]]), array([[-0.46285155+0.88643062j,  0.00202045-0.00226254j],
       [-0.00202045-0.00226254j, -0.46285155-0.88643062j]]), array([[ 0.14099407+0.98650187j, -0.03866915-0.07375244j],
       [ 0.03866915-0.07375244j,  0.14099407-0.98650187j]]), array([[ 0.61521112 +7.88361909e-01j, -0.00072536 +5.05898948e-04j],
       [ 0.00072536 +5.05898948e-04j,  0.61521112 -7.88361909e-01j]]), array([[ 0.91166356+0.41064404j, -0.00839516+0.01305905j],
       [ 0.00839516+0.01305905j,  0.91166356-0.41064404j]]), array([[ 0.99985100-0.01622965j,  0.00474889+0.00346757j],
       [-0.00474889+0.00346757j,  0.99985100+0.01622965j]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 2.2204460492503131e-16, 0.0, 2.2204460492503131e-16, 0.0, 0.99999999999999989, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.49999999999999994, 0.5, 0.49999999999999994]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)
        
    def test_res6(self):
        """ Force convergence fails"""
        self.createH(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0], pickle_file=None)
        tb_surface.wcc_calc(verbose=False,
                            num_strings=11,
                            gap_tol=1.,
                            move_tol=1e-12,
                            pos_tol=1e-12,
                            min_neighbour_dist=5e-2)

        res = {'t_par': [0.0, 0.025000000000000001, 0.050000000000000003, 0.075000000000000011, 0.10000000000000001, 0.125, 0.15000000000000002, 0.20000000000000001, 0.25, 0.27500000000000002, 0.30000000000000004, 0.35000000000000003, 0.40000000000000002, 0.45000000000000001, 0.5, 0.52500000000000002, 0.55000000000000004, 0.57500000000000007, 0.60000000000000009, 0.62500000000000011, 0.65000000000000013, 0.70000000000000007, 0.75, 0.77500000000000002, 0.80000000000000004, 0.82500000000000007, 0.85000000000000009, 0.90000000000000002, 0.94999999999999996, 0.97499999999999998, 1.0], 'wcc': [[0.49989756445522526, 0.50010243554477485], [0.49971247788782919, 0.50028752211217065], [0.49915131242909783, 0.50084868757090195], [0.4995492167262861, 0.50045078327371417], [0.4989070953664948, 0.50109290463350509], [0.49917664945076229, 0.50082335054923788], [0.49890001928058431, 0.50109998071941564], [0.49832051760024815, 0.50167948239975158], [0.49726974718931366, 0.5027302528106864], [0.49796473373248851, 0.50203526626751149], [0.49723674371998322, 0.50276325628001672], [0.49649706630252544, 0.50350293369747456], [0.4958938584161518, 0.50410614158384792], [0.49338001521638725, 0.50661998478361281], [0.49126535969927548, 0.50873464030072446], [0.48898708128514817, 0.51101291871485177], [0.48786096543179935, 0.51213903456820065], [0.4837641426863149, 0.51623585731368493], [0.483015252873919, 0.51698474712608089], [0.47629058908515581, 0.52370941091484435], [0.46919680198014629, 0.53080319801985376], [0.44453353258807793, 0.55546646741192207], [0.38938229291184245, 0.61061770708815744], [0.35089940733458086, 0.6491005926654192], [0.30120691175234932, 0.69879308824765063], [0.25071246229763938, 0.74928753770236067], [0.20743879448780472, 0.792561205512195], [0.13312222790594946, 0.86687777209405048], [0.062096376652371776, 0.93790362334762822], [0.030033595722478469, 0.96996640427752134], [0.00046297266350680042, 0.99953702733649319]], 'lambda_': [array([[ -9.99999793e-01 +6.42395895e-04j,
          1.49243473e-05 -3.67881559e-05j],
       [ -1.49243473e-05 -3.67881559e-05j,
         -9.99999793e-01 -6.42395895e-04j]]), array([[ -9.99998368e-01+0.00168324j,  -4.00866334e-05-0.00065478j],
       [  4.00866334e-05-0.00065478j,  -9.99998368e-01-0.00168324j]]), array([[ -9.99985782e-01+0.00532758j,   2.59418155e-05+0.00022602j],
       [ -2.59418155e-05+0.00022602j,  -9.99985782e-01-0.00532758j]]), array([[ -9.99995989e-01 +2.82958022e-03j,
         -1.08336629e-04 -6.28603963e-05j],
       [  1.08336629e-04 -6.28603963e-05j,
         -9.99995989e-01 -2.82958022e-03j]]), array([[ -9.99976423e-01+0.00669214j,  -3.91107871e-04-0.0014887j ],
       [  3.91107871e-04-0.0014887j ,  -9.99976423e-01-0.00669214j]]), array([[ -9.99986619e-01+0.00514208j,   8.08187101e-05+0.0005612j ],
       [ -8.08187101e-05+0.0005612j ,  -9.99986619e-01-0.00514208j]]), array([[ -9.99976116e-01+0.00690861j,  -9.81338759e-05+0.00016706j],
       [  9.81338759e-05+0.00016706j,  -9.99976116e-01-0.00690861j]]), array([[ -9.99944323e-01+0.01053128j,   1.28404389e-04+0.00065328j],
       [ -1.28404389e-04+0.00065328j,  -9.99944323e-01-0.01053128j]]), array([[ -9.99852862e-01+0.01714624j,   1.26116480e-05+0.00051038j],
       [ -1.26116480e-05+0.00051038j,  -9.99852862e-01-0.01714624j]]), array([[ -9.99918235e-01+0.01277193j,   5.66053120e-05+0.00063036j],
       [ -5.66053120e-05+0.00063036j,  -9.99918235e-01-0.01277193j]]), array([[ -9.99849283e-01+0.01736055j,   3.63009951e-05+0.00014265j],
       [ -3.63009951e-05+0.00014265j,  -9.99849283e-01-0.01736055j]]), array([[ -9.99757799e-01+0.021951j  ,   1.12964608e-04-0.00157611j],
       [ -1.12964608e-04-0.00157611j,  -9.99757799e-01-0.021951j  ]]), array([[ -9.99667208e-01+0.02564542j,   8.08937809e-04-0.00267062j],
       [ -8.08937809e-04-0.00267062j,  -9.99667208e-01-0.02564542j]]), array([[ -9.99135070e-01+0.04158149j,   9.03027841e-05-0.00028995j],
       [ -9.03027841e-05-0.00028995j,  -9.99135070e-01-0.04158149j]]), array([[ -9.98494396e-01 +5.48538176e-02j,
          9.55901444e-17 -1.08895225e-16j],
       [ -1.64830213e-16 +4.32330536e-17j,
         -9.98494396e-01 -5.48538176e-02j]]), array([[ -9.97606897e-01+0.06910223j,  -8.93894651e-04-0.00213567j],
       [  8.93894651e-04-0.00213567j,  -9.97606897e-01-0.06910223j]]), array([[ -9.97092716e-01+0.07619696j,   3.28216597e-04+0.00017844j],
       [ -3.28216597e-04+0.00017844j,  -9.97092716e-01-0.07619696j]]), array([[-0.99480119+0.1017953j , -0.00266076+0.00110424j],
       [ 0.00266076+0.00110424j, -0.99480119-0.1017953j ]]), array([[-0.99431100+0.10604365j, -0.00293972+0.00957761j],
       [ 0.00293972+0.00957761j, -0.99431100-0.10604365j]]), array([[-0.98892438+0.14835976j, -0.00417222+0.00073452j],
       [ 0.00417222+0.00073452j, -0.98892438-0.14835976j]]), array([[-0.98132910+0.19133692j, -0.01941047+0.00257226j],
       [ 0.01941047+0.00257226j, -0.98132910-0.19133692j]]), array([[ -9.39883922e-01+0.34149113j,  -8.00240498e-04+0.00117507j],
       [  8.00240498e-04+0.00117507j,  -9.39883922e-01-0.34149113j]]), array([[-0.76803350+0.64023154j, -0.00969969+0.01157753j],
       [ 0.00969969+0.01157753j, -0.76803350-0.64023154j]]), array([[-0.59234771+0.80212657j, -0.07557041+0.0025032j ],
       [ 0.07557041+0.0025032j , -0.59234771-0.80212657j]]), array([[-0.31622014+0.94653104j,  0.06153079+0.01725629j],
       [-0.06153079+0.01725629j, -0.31622014-0.94653104j]]), array([[-0.00447652+0.99998317j,  0.00158114+0.0033348j ],
       [-0.00158114+0.0033348j , -0.00447652-0.99998317j]]), array([[ 0.26424397+0.96359669j, -0.03812504-0.01424851j],
       [ 0.03812504-0.01424851j,  0.26424397-0.96359669j]]), array([[  6.70115736e-01+0.7422559j ,  -1.75471578e-04-0.00102148j],
       [  1.75471578e-04-0.00102148j,   6.70115736e-01-0.7422559j ]]), array([[ 0.92484706+0.37901779j, -0.02755923+0.01561788j],
       [ 0.02755923+0.01561788j,  0.92484706-0.37901779j]]), array([[ 0.98224767+0.18700937j, -0.01125333+0.00950596j],
       [ 0.01125333+0.00950596j,  0.98224767-0.18700937j]]), array([[  9.99995769e-01-0.00200265j,   1.38088335e-04-0.00210529j],
       [ -1.38088335e-04-0.00210529j,   9.99995769e-01+0.00200265j]])], 'kpt': [[0.0, 0.0, 0], [0.012500000000000001, 0.0, 0], [0.025000000000000001, 0.0, 0], [0.037500000000000006, 0.0, 0], [0.050000000000000003, 0.0, 0], [0.0625, 0.0, 0], [0.075000000000000011, 0.0, 0], [0.10000000000000001, 0.0, 0], [0.125, 0.0, 0], [0.13750000000000001, 0.0, 0], [0.15000000000000002, 0.0, 0], [0.17500000000000002, 0.0, 0], [0.20000000000000001, 0.0, 0], [0.22500000000000001, 0.0, 0], [0.25, 0.0, 0], [0.26250000000000001, 0.0, 0], [0.27500000000000002, 0.0, 0], [0.28750000000000003, 0.0, 0], [0.30000000000000004, 0.0, 0], [0.31250000000000006, 0.0, 0], [0.32500000000000007, 0.0, 0], [0.35000000000000003, 0.0, 0], [0.375, 0.0, 0], [0.38750000000000001, 0.0, 0], [0.40000000000000002, 0.0, 0], [0.41250000000000003, 0.0, 0], [0.42500000000000004, 0.0, 0], [0.45000000000000001, 0.0, 0], [0.47499999999999998, 0.0, 0], [0.48749999999999999, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 0.99999999999999989, 0.99999999999999989, 0.0, 0.0, 0.0, 0.0, 0.99999999999999989, 0.0, 0.0, 0.0, 0.0, 0.99999999999999989, 0.0, 0.0, 0.0, 0.0, 0.99999999999999989, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.49999999999999983, 0.49999999999999994, 0.5, 0.49999999999999994, 0.5]}

        self.assertResConv(tb_surface.get_res(), res)
        
    def test_warning_2(self):
        r"""test the warning that is given when min_neighbour_dist is too small / num_strings too large"""
        self.createH(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0], pickle_file=None)

        with warnings.catch_warnings(record=True) as w:
            warnings.simplefilter('always')
            tb_surface.wcc_calc(verbose=False,
                                num_strings=11,
                                gap_tol=1.,
                                move_tol=1e-12,
                                pos_tol=1e-12,
                                min_neighbour_dist=2e-1)
            assert len(w) == 1
            assert w[-1].category == UserWarning
            assert "min_neighbour_dist" in str(w[-1].message)
            assert "num_strings" in str(w[-1].message)

    def test_warning(self):
        """ test the warning that is given when string_vec != None"""
        self.createH(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        with warnings.catch_warnings(record=True) as w:
            warnings.simplefilter('always')
            tb_surface = tb_system.surface(lambda kx: [kx / 2, 0, 0], [0, 1, 0])
            assert len(w) == 1
            assert w[-1].category == DeprecationWarning
            assert "string_vec" in str(w[-1].message)

    def test_saveload(self):
        self.createH(0.1, 0.3)
        tb_system = z2pack.em.tb.System(self.model)
        surface1 = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0], pickle_file=self._build_folder + '/tb_pickle.txt')
        surface2 = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0], pickle_file=self._build_folder + '/tb_pickle.txt')
        surface1.wcc_calc(verbose=False)
        surface2.load()
        self.assertFullAlmostEqual(surface1.get_res(), surface2.get_res())

    def testkwargcheck1(self):
        """ test kwarg check on wcc_calc """
        self.createH(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        self.assertRaises(
            TypeError,
            tb_surface.wcc_calc,
            invalid_kwarg = 3)

    def testkwargcheck2(self):
        """ test kwarg check on __init__ """
        self.createH(0, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        self.assertRaises(
            TypeError,
            tb_system.surface,
            1, 2, 0, invalid_kwarg = 3)

if __name__ == "__main__":
    unittest.main()
